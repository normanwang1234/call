{"version":3,"sources":["screens/LoadingScreen.js","screens/VideoScreen.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["LoadingScreen","style","backgroundColor","border","textAlign","justifyContent","width","margin","fontSize","paddingTop","src","borderRadius","height","alignItems","paddingBottom","className","aria-hidden","to","React","Component","VideoScreen","autoPlay","color","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAIqBA,E,uKAEb,OACI,yBAAKC,MAAO,CAACC,gBAAgB,UAAWC,OAAO,kBAAmBC,UAAU,SAAUC,eAAe,SAASC,MAAO,MAAMC,OAAO,SAG1H,wBAAIN,MAAO,CAACG,UAAU,SAAUI,SAAS,GAAGC,WAAW,KAAvD,uCACA,yBACIC,IAAI,kCACJT,MAAO,CAACU,aAAa,GAAIC,OAAO,IAAKP,eAAe,SAAUQ,WAAW,YAG7E,wBAAIZ,MAAO,CAACa,cAAc,KAA1B,UACA,yBAAKb,MAAO,CAACI,eAAe,WACxB,uBAAGJ,MAAO,CAACO,SAAU,IAAKO,UAAU,wBAAyBC,cAAY,UAG7E,6BACI,kBAAC,IAAD,CAAMC,GAAG,eACL,4BACIhB,MAAO,CAACC,gBAAgB,UAAUU,OAAO,GAAIN,MAAM,EAAGH,OAAO,mBAIzE,yBAAKF,MAAO,CAACW,OAAO,OAAQN,MAAM,e,GAxBXY,IAAMC,W,QCE5BC,E,uKAEb,OACI,6BAGI,kBAAC,SAAD,KACI,4BAAQV,IAAI,oCAEZ,kBAAC,aAAD,CAAYW,UAAU,KAEtB,wBAAIpB,MAAO,CAACqB,MAAM,QAAQnB,OAAO,qBAErC,yBACIO,IAAI,kFACJT,MAAO,CAACK,MAAM,IAAKM,OAAO,W,GAfLM,IAAMC,WCQhCI,EAPF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW1B,IACrC,kBAAC,IAAD,CAAOyB,KAAK,cAAcC,UAAWN,MCE9BO,MARf,WACE,OACE,yBAAKZ,UAAU,cACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e224ad9e.chunk.js","sourcesContent":["import React from 'react';\nimport {Grid, Cell} from 'react-mdl';\nimport {Link} from 'react-router-dom';\n\nexport default class LoadingScreen extends React.Component {\n    render() {\n        return (\n            <div style={{backgroundColor:'#e9e9e9', border:'3px solid black', textAlign:'center', justifyContent:'center',width: '75%',margin:'auto'}}>\n                \n                \n                    <h1 style={{textAlign:'center', fontSize:40,paddingTop:40}}>You're Currently Connecting With...</h1>\n                    <img\n                        src=\"https://i.imgur.com/6Sg2irv.jpg\"\n                        style={{borderRadius:50, height:150, justifyContent:'center', alignItems:'center'}}\n                            />\n                    \n                    <h2 style={{paddingBottom:40}}>Ananda</h2>\n                    <div style={{justifyContent:'center'}}>\n                        <i style={{fontSize: 80}} className=\"fa fa-refresh fa-spin\"  aria-hidden=\"true\"/>\n                    </div>\n                    \n                    <div>\n                        <Link to=\"/call/video\">\n                            <button\n                                style={{backgroundColor:'#e9e9e9',height:20, width:5, border:'transparent'}}\n                                />\n                        </Link>\n                    </div>\n                    <div style={{height:'100%', width:'100%'}}>\n                     {/* <Grid style={{width:'100%', margin:'auto'}}>\n                        <Cell col={4}>\n                            1\n                        </Cell>\n                        <Cell col={4}>\n                            2\n                        </Cell>\n\n                        <Cell col={4}>\n                            3\n                        </Cell>\n                    </Grid>    */}\n                    </div>\n                    \n                    \n                    \n                \n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Player, ControlBar} from 'video-react';\nimport {Grid, Cell} from 'react-mdl';\n\n\nexport default class VideoScreen extends React.Component {\n    render() {\n        return (\n            <div>\n                \n                \n                <Player>\n                    <source src=\"https://i.imgur.com/PTKeVkn.mp4\" />\n                    \n                    <ControlBar autoPlay={true}/>\n                    </Player>\n                    <hr style={{color:'white',border:'3px solid black'}}/>\n\n                <img\n                    src=\"https://cdn3.iconfinder.com/data/icons/cosmo-color-multimedia-2/40/hang-512.png\"\n                    style={{width:100, height:90}}\n                    \n                    />\n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport LoadingScreen from './screens/LoadingScreen';\nimport VideoScreen from './screens/VideoScreen';\n\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/call\" component={LoadingScreen}/>\n        <Route path=\"/call/video\" component={VideoScreen} />\n    </Switch>\n)\n    \nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"background\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}